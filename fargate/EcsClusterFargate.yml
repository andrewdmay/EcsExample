AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Example - ECS Cluster Fargate

Parameters:
  CertificateArn:
    Description: Certificate ARN used for shared Application Load Balancer HTTPS Listener
    Type: String
  PublicSubnetIds:
    Description: Public Subnets used for Application Load Balancer
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC identifier in which resources will be created
    Type: AWS::EC2::VPC::Id

Resources:
  # ECS Cluster which will contain the ECS Services
  EcsCluster:
    Type: AWS::ECS::Cluster

  # Security Group for Application Load Balancer allowing access from all IP Addresses on Port 80 for HTTP and 443 for HTTPS
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsClusterFargate-ALB Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTP (will be redirected to HTTPS)
          FromPort: 80
          IpProtocol: TCP
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTPS
          FromPort: 443
          IpProtocol: TCP
          ToPort: 443
      VpcId: !Ref VpcId

  # Security Group for Fargate Tasks that allows access for HTTP traffic from ALB Security Group
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsClusterFargate-Fargate Security Group
      SecurityGroupIngress:
        - Description: Allow HTTP from ALB
          FromPort: 80
          IpProtocol: TCP
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      VpcId: !Ref VpcId

  # Shared Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Scheme: internet-facing
      SecurityGroups:
      - !Ref AlbSecurityGroup
      Subnets: !Ref PublicSubnetIds

  # Default Target group for Application Load Balancer, this will not contain any services
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref VpcId

  # HTTPS Listener for shared Application Load Balancer
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  # HTTP Listener that redirects HTTP -> HTTPS
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - RedirectConfig:
          Protocol: HTTPS
          Port: '443'
          StatusCode: HTTP_301
        Type: redirect
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

# Outputs include exports prefixed with ECSClusterFargate-
Outputs:
  EcsCluster:
    Description: ECS Cluster
    Value: !Ref EcsCluster
    Export:
      Name: EcsClusterFargate-EcsCluster
  FargateSecurityGroup:
    Description: Fargate Security Group
    Value: !Ref FargateSecurityGroup
    Export:
      Name: EcsClusterFargate-FargateSecurityGroup
  Listener:
    Description: Load Balancer Listener
    Value: !Ref HttpsListener
    Export:
      Name: EcsClusterFargate-Listener
  LoadBalancerCanonicalHostedZoneID:
    Description: Load Balancer
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: EcsClusterFargate-LoadBalancer-CanonicalHostedZoneID
  LoadBalancerDNSName:
    Description: Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: EcsClusterFargate-LoadBalancer-DNSName
